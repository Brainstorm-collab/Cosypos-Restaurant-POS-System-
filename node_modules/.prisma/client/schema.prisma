generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  role         Role
  name         String
  phone        String?
  profileImage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  orders        Order[]
  reservations  Reservation[]
  attendance    Attendance[]
  notifications Notification[]

  @@index([role])
  @@index([email])
  @@index([createdAt])
}

enum Role {
  ADMIN
  STAFF
  USER
}

model MenuCategory {
  id        String     @id @default(cuid())
  name      String
  image     String?
  items     MenuItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model MenuItem {
  id          String       @id @default(cuid())
  name        String
  description String?
  priceCents  Int
  available   Boolean      @default(true)
  stock       Int          @default(0)
  image       String?
  category    MenuCategory @relation(fields: [categoryId], references: [id])
  categoryId  String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  orderItems OrderItem[]

  @@index([categoryId])
  @@index([available])
  @@index([name])
  @@index([createdAt])
}

model InventoryItem {
  id        String   @id @default(cuid())
  name      String
  sku       String?  @unique
  quantity  Float    @default(0)
  unit      String
  parLevel  Float?
  costCents Int?
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Table {
  id        String      @id @default(cuid())
  label     String      @unique
  capacity  Int
  status    TableStatus @default(AVAILABLE)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  orders       Order[]
  reservations Reservation[]
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
}

model Order {
  id         String      @id @default(cuid())
  status     OrderStatus @default(PENDING)
  user       User?       @relation(fields: [userId], references: [id])
  userId     String?
  table      Table?      @relation(fields: [tableId], references: [id])
  tableId    String?
  totalCents Int         @default(0)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  items      OrderItem[]
  payments   Payment[]

  @@index([status])
  @@index([userId])
  @@index([tableId])
  @@index([createdAt])
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  SERVED
  PAID
  CANCELLED
}

model OrderItem {
  id         String   @id @default(cuid())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId String
  qty        Int
  priceCents Int
}

model Reservation {
  id              String            @id @default(cuid())
  customer        User              @relation(fields: [customerId], references: [id])
  customerId      String
  table           Table?            @relation(fields: [tableId], references: [id])
  tableId         String?
  tableNumber     String
  floor           Int
  paxNumber       Int
  reservationDate DateTime
  startTime       String
  endTime         String
  depositFee      Float             @default(0)
  status          ReservationStatus @default(PENDING)
  paymentMethod   String            @default("CASH")
  specialRequests String?
  customerTitle   String            @default("Mr")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([customerId])
  @@index([tableId])
  @@index([reservationDate])
  @@index([status])
  @@index([floor])
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  NO_SHOW
  COMPLETED
}

model Attendance {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  clockIn   DateTime
  clockOut  DateTime?
  breaksMin Int       @default(0)
  createdAt DateTime  @default(now())
}

model Payment {
  id          String   @id @default(cuid())
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String
  method      String
  amountCents Int
  status      String
  createdAt   DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  channel   String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}
